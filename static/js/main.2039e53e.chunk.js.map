{"version":3,"sources":["makeData.js","App.js","reportWebVitals.js","index.js"],"names":["range","len","arr","i","push","newPerson","index","dataObj","externalFile","tableData","forEach","item","columnIndex","columnData","split","arrangeContent","data","accessor","toString","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","currency","currencySymbol","totalBudget","Styles","styled","div","defaultColumn","Cell","initialValue","value","row","id","column","updateMyData","React","useState","setValue","useEffect","onChange","e","target","onClick","Table","columns","skipPageReset","useTable","autoResetPage","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","className","render","getRowProps","cells","cell","j","getCellProps","original","highlightRow","highlightCol","Modal","show","handleClose","handleSave","handleEmailChange","showHideClassName","children","type","placeholder","disabled","App","console","log","sideHeaders","useMemo","Header","parseInt","topHeaders","headerObj","columnName","lens","makeDataLevel","depth","d","subRows","undefined","makeData","setData","originalData","setSkipPageReset","showModal","userName","setUserName","totalAmount","setTotalSelectedItems","exportExcel","setExportExcel","userDataForExcel","setUserDataForExcel","getSelectedItems","result","text","col","sum","stam","data5","title","header","hideElement","filename","name","label","selectedItems","dataSet","date","Date","persist","toLocaleString","maximumFractionDigits","rowIndex","columnId","old","isHighlight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2039e53e.chunk.js","sourcesContent":["// import namor from \"namor\";\nimport externalFile from './Configurations'\n// const myData = [\n//   [\n//     `\n//    - Tenant portal acceleration\n//    - SDK/Integration platform as part of tenant portal.\n//   `,\n//     `\n//    - Tenant Portal Acceleration\n//    - Wireline onboarding package\n//    - Enhanced reporting and analytics`\n//    ,\n//   `- Tenant portal Acceleration Wireline onboard Reporting/Analytics\n//    - Additional OOTB interfaces. Pre-integrated 3p.\n//    - Partner marketplace/ecosystem`\n//   ],\n//   [\n//     `\n//    - Enhanced SMB/B2B support.\n//    - Hierarchies, customer-specific pricing and charge redirections`,\n//     `- B2B/SMB support.\n//    - Fixed-line ordering and billing.\n//    - Interfaces to inventory systems and long-running/complex order support including Workforce management stubs.`,\n//     `- B2B.SMB support Fixed-line\n//    - Enhanced subscription billing/OTT/3p ordering and management.\n//    - Support for IPTV ordering and management.   Stubs for VoD integration.`\n//   ],\n//   [\n//     `- Additional configuration controls for selfcare and retail channels.`,\n//     `- Configuration Enhanced self-care building blocks.`,\n//     `- Configuration Selfcare Native Mobile Apps OOTB â€œtheme packs More configuration controls\"`\n//   ],\n//   [\n//     `\n//     - Tenant-aware monitoring and execution\n//     - Streamlined upgradeability Initial Task automation`,\n//     `- Operational improvements\n//     - Cloud-native elasticity for billing and rating\n//     - Initial cost-reduction refactoring`,\n//     `- Operational Improvements Elasticity\n//     - Additional cloud-native tools and technologies.  Serverless Initial move away from databases`\n//   ],\n//   [\n//     `- Additional payment sources\n//      - Separate payment types per product\n//      - Invoice/statement/collections enhancements\n//      - GL and settlements work`,\n//     `- Billing infra work\n//      - Ordering integration framework and easy-to-use APIs\n//      - Initial partner onboarding work in SDK/tenant portal`,\n//     `- Billing Ordering framework Partner Onboarding\n//      - Infrastructure for partner self-onboarding.\n//      - Partner Settlements\n//      - Marketplace or integration with one`\n//   ]\n// ];\n\nconst range = (len) => {\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nconst newPerson = (index) => {\n  const dataObj = {}\n  externalFile.tableData[index].forEach((item, columnIndex) => {\n    const columnData = item.split(';')\n    let arrangeContent = ``\n    columnData.forEach((data, i) => {\n      arrangeContent += `${data}\\n`\n    })\n    let accessor = (columnIndex + 1).toString()\n    dataObj[`${accessor.toString()}`] = arrangeContent\n  })\n  return dataObj\n};\n\nexport default function makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth];\n    return range(len).map((d, index) => {\n      return {\n        ...newPerson(index),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n      };\n    });\n  };\n\n  return makeDataLevel();\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useTable, usePagination } from \"react-table\";\nimport externalFile from './Configurations'\nimport makeData from \"./makeData\";\n\nimport ReactExport from \"react-data-export\";\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst currency = externalFile.currencySymbol;\nconst totalBudget = externalFile.totalBudget; // Here we should get the total budget from external source\n\nconst Styles = styled.div`\n  padding: 1rem;\n  /* background: -webkit-linear-gradient(bottom,#c471f5,#fa71cd); */\n  /* background: linear-gradient(45deg,#4158d0,#c850c0); */\n    color: white;\n  * {outline: none;}\n  /* font-family: sans-serif; */\n  /* Hide the first header row */\n\n  .header0 {\n    display: none;\n  }\n\n  .header1 {\n    background: #36304a;\n  }\n\n  h1 {\n    text-align: center;\n  }\n\n  button {\n    display:inline-block;\nâ€ƒ   padding: 0.3em 1.2em;\nâ€ƒ   margin: 0 0.1em 0.1em 0;\nâ€ƒ   border: 0.16em solid rgba(255,255,255,0);\nâ€ƒ   border-radius: 2em;\nâ€ƒ   box-sizing: border-box;\nâ€ƒ   text-decoration: none;\nâ€ƒ   font-family: 'Roboto',sans-serif;\nâ€ƒ   font-weight: 300;\nâ€ƒ   color: #FFFFFF;\nâ€ƒ   text-align: center;\nâ€ƒ   transition: all 0.2s;\n    background-color: #4e9af1;\n  }\n\n  button:disabled {\n  background-color: #cccccc !important;\n  color: #666666;\n  cursor: not-allowed !important;\n  }\n\n  button:hover{\nâ€ƒ border-color: rgba(44,165,200,1);\n  border: 2px solid;\n  }\n\n  /* button:disabled:hover {\n    border: none !important;\n  } */\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    /* Here To Change The Rows Color */\n    tr {\n      :nth-child(even) {\n        background-color: red !important;\n      }\n\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n      :first-child {\n        font-weight: bold;\n        text-align: left;\n        font-size: 17px;\n      }\n\n      span {\n        white-space: pre-line;\n        display: block;\n      }\n    }\n    .dataTD {\n      cursor: pointer;\n    }\n  }\n  .highlight {\n    background: #a3a9ff;;\n  }\n\n  .pagination {\n    /* padding: 0.5rem; */\n    margin-top: 20px;\n  }\n  .submitContainer {\n    text-align: center;\n    .submitButton {\n    width: 200px;\n    height: 50px;\n    font-size: 1rem;\n    font-weight: bold;\n    background-color: #4e9af1;\n    cursor: pointer;\n  }\n  \n  }\n  .budgetContainer {\n    display: flex;\n    margin-bottom: 10px;\n    padding: 10px;\n    align-items: center;\n    justify-content: space-between;\n    /* :first-child {\n      min-width: 120px;\n      display: inline-block;\n      border: 1px solid black;\n      padding: 10px;\n      font-weight: 700;\n    } */\n    .resetButton {\n      background-color: transparent;\n      border: 2px solid white;\n      // color: #02c4d8;\n      font-weight: 700;\n      :hover {\n        background-color: #8d28975e !important;\n        border: 1px solid white;\n        cursor: pointer;\n      }\n    }\n    .budgetLabel {\n      font-weight: 700;\n      font-size: 25px;\n      margin: 0;\n    }\n    .currentAmount {\n      min-width: 120px;\n      display: inline-block;\n      // border: 1px solid black;\n      font-size: 25px;\n      padding: 10px;\n      // background-color: #4ef18f;\n      font-weight: 700;\n      span {\n        margin-left: 30px;\n      }\n    }\n    .shakeTotal {\n      border-radius: 30px;\n      background-color: #f50600a8;\n      animation: shake 0.82s cubic-bezier(.36,.07,.19,.97) both;\n      transform: translate3d(0, 0, 0);\n      backface-visibility: hidden;\n      perspective: 1000px;\n    }\n    @keyframes shake {\n    10%, 90% {\n    transform: translate3d(-1px, 0, 0);\n    }\n  \n    20%, 80% {\n    transform: translate3d(2px, 0, 0);\n    }\n\n    30%, 50%, 70% {\n    transform: translate3d(-4px, 0, 0);\n    }\n\n    40%, 60% {\n    transform: translate3d(4px, 0, 0);\n    }\n    }\n  }\n\n  .modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.6);\n  }\n\n  .modal-main {\n    display: flex;\n    flex-direction: column;\n    max-width: 310px;\n    padding: 30px;\n    border-radius: 10px;\n    position: fixed;\n    background: white;\n    width: 80%;\n    height: auto;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    border: 1px solid white;\n    background: linear-gradient(21deg,#41587B,#C85046);\n    // border: 3px solid black;\n    // background: linear-gradient( 45deg,#4158d0,#c850c0);\n\n    .modalButtonsContainer {\n      align-self: center;\n      margin-top: 25px;\n      button:hover {\n        cursor: pointer;\n      }\n      button:last-child {\n        // color: black;\n        background: transparent;\n        border: 1px solid white;\n      }\n    }\n\n    .modalInput {\n      border: 1px solid black;\n    }\n  }\n\n  .display-block {\n    display: block;\n  }\n\n  .display-none {\n    display: none;\n  }\n`;\n\n// const nodemailer = require(\"nodemailer\");\n// const transporter = nodemailer.createTransport({\n//   host: \"smtp.gmail.email\",\n//   port: 587,\n//   auth: {\n//     user: \"<email>\",\n//     pass: \"<password>\",\n//   },\n// });\n// const emailData = [{relation:\"father\",name:\"Anakin Skywalker\"},{relation:\"son\",name:\"Luke Skywalker\"}];\n// const csv = parse(emailData, [\"relation\",\"name\"]);\n// const csvData = [\n//   [\"firstname\", \"lastname\", \"email\"],\n//   [\"Ahmed\", \"Tomi\", \"ah@smthing.co.com\"],\n//   [\"Raed\", \"Labes\", \"rl@smthing.co.com\"],\n//   [\"Yezzi\", \"Min l3b\", \"ymin@cocococo.com\"]\n// ];\n// Create an editable cell renderer\nconst EditableCell = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  updateMyData // This is a custom function that we supplied to our table instance\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue);\n\n  const onChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleOnClick = () => {\n    updateMyData(index, id, value);\n  };\n\n  // If the initialValue is changed external, sync it up with our state\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  return (\n    <span onChange={onChange} onClick={handleOnClick}>\n      {value}\n    </span>\n  );\n};\n\n// Set our editable cell renderer as the default Cell renderer\nconst defaultColumn = {\n  Cell: EditableCell\n};\n\n// Be sure to pass our updateMyData and the skipPageReset option\nfunction Table({ columns, data, updateMyData, skipPageReset }) {\n  // For this example, we're using pagination to illustrate how to stop\n  // the current page from resetting when our data changes\n  // Otherwise, nothing is different here.\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      // updateMyData isn't part of the API, but\n      // anything we put into these options will\n      // automatically be available on the instance.\n      // That way we can call this function from our\n      // cell renderer!\n      updateMyData\n    },\n    usePagination\n  );\n  // Render the UI for your table\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup, index) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()} className={`header${index}`}>\n                  {column.render(\"Header\")}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell, j) => {\n                  return (\n                    <td\n                      {...cell.getCellProps()}\n                      className={`${cell.row.original.highlightRow === i &&\n                        cell.row.original.highlightCol === j\n                        ? \"highlight\"\n                        : j === 0 ? \"\" : \"dataTD\"\n                        }`}\n                    >\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n      </div>\n    </>\n  );\n}\n\nconst Modal = ({\n  show,\n  handleClose,\n  handleSave,\n  handleEmailChange,\n  value,\n  children\n}) => {\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n  return (\n    <div className={showHideClassName}>\n      <div className=\"modal-main\">\n        <div>\n          <span>Enter Your Email: </span>\n          <input\n            type=\"text\"\n            placeholder=\"Email\"\n            value={value}\n            onChange={handleEmailChange}\n            className=\"modalInput\"\n          />\n        </div>\n        <div className=\"modalButtonsContainer\">\n          <button type=\"button\" onClick={handleSave} disabled={value === \"\"}>\n            Save\n          </button>\n          <button type=\"button\" onClick={handleClose}>\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  console.log('externalFile.tableData: ', externalFile.tableData)\n  // const sideHeaders =  Object.values(externalFile.sideHeaders)\n  const sideHeaders =  externalFile.sideHeaders\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Product investment area\",\n        id: \"TAL\",\n        Cell: ({row}) => {\n          return <span>{sideHeaders[parseInt(row?.id)]}</span>;\n        }\n      },\n      {\n        Header: '',\n        id: \"123\",\n        columns:\n          externalFile.topHeaders.map((headerObj, index) => ({\n              Header: headerObj?.columnName,\n              accessor: (index + 1).toString(),\n              value: headerObj?.value\n            }))\n      }\n    ],\n    [sideHeaders]\n  );\n\n  const [data, setData] = React.useState(() => makeData(5));\n  const [originalData] = React.useState(data);\n  const [skipPageReset, setSkipPageReset] = React.useState(false);\n  const [show, showModal] = React.useState(false);\n  const [userName, setUserName] = React.useState(\"\");\n  const [totalAmount, setTotalSelectedItems] = React.useState(0);\n  const [exportExcel, setExportExcel] = React.useState(false)\n  const [userDataForExcel, setUserDataForExcel] = React.useState([])\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    console.log(\n      \"check this: \",\n      \"row:\",\n      rowIndex,\n      \" column:\",\n      columnId,\n      \" value: \",\n      value\n    );\n    // setSkipPageReset(true);\n    setData((old) => {\n      return old.map((row, index) => {\n        if (index === rowIndex) {\n          const isHighlight =\n            rowIndex === old[rowIndex].highlightRow &&\n            parseInt(columnId, 10) === old[rowIndex].highlightCol;\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n            highlightRow: isHighlight ? -1 : rowIndex,\n            highlightCol: isHighlight ? -1 : parseInt(columnId, 10),\n            value: isHighlight\n              ? old[rowIndex].value -\n              columns[1].columns[parseInt(columnId, 10) - 1].value\n              : columns[1].columns[parseInt(columnId, 10) - 1].value\n          };\n        }\n        return row;\n      });\n    });\n  };\n\n  // const calculateBudget = () => {\n  //   let sum = 0;\n  //   data.forEach((item) => {\n  //     sum += item?.value ?? 0;\n  //   });\n  //   setTotalSelectedItems(sum);\n  // };\n\n  const openModal = () => {\n    showModal(true);\n  };\n\n  const handleClose = () => {\n    showModal(false);\n    setUserName(\"\");\n  };\n\n  const handleSave = () => {\n    const selectedItems = getSelectedItems();\n    const date = new Date().toString();\n    const result = {\n      selectedItems,\n      userName,\n      date,\n      totalBudget\n    }\n    setUserDataForExcel([result])\n    setExportExcel(true)\n    \n    // transporter.sendMail(\n    //   {\n    //     from: userName.toString(),\n    //     to: \"talmiedzigorski@gmail.com\",\n    //     subject: \"You need to know the truth\",\n    //     text: \"Ola! Please check the attachment for a surprise ðŸ˜Š\",\n    //     html: \"<b>Ola! Please check the attachment for a surprise! ðŸ˜Š</b>\",\n    //     // here is the magic\n    //     // attachments: [\n    //     //   {\n    //     //     filename: \"file.csv\",\n    //     //     content: csv,\n    //     //   },\n    //     // ],\n    //   },\n    //   (err, info) => {\n    //     if (err) {\n    //       console.log(\"Error occurred. \" + err.message);\n    //       return process.exit(1);\n    //     }\n    //     console.log(\"Message sent: %s\", info.messageId);\n    //     // Preview only available when sending through an Ethereal account\n    //     console.log(\"Preview URL: %s\", nodemailer.getTestMessageUrl(info));\n    //   }\n    // );\n    \n    handleClose();\n  };\n\n  const getSelectedItems = () => {\n    const result = [];\n    data.forEach((item) => {\n      item.value && result.push({\n        text: item[item?.highlightCol],\n        row: item?.highlightRow,\n        col: item?.highlightCol,\n        value: item?.value\n      });\n    });\n    return result;\n  };\n\n  const handleEmailChange = (e) => {\n    e.persist();\n    setUserName(e.target.value);\n  };\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  React.useEffect(() => {\n    setSkipPageReset(false);\n    let sum = 0;\n    data.forEach((item) => {\n      sum += item?.value ?? 0;\n    });\n    setTotalSelectedItems(sum);\n    // calculateBudget();\n  }, [data]);\n\n  // React.useEffect(() => {\n  //   console.log('Going To Export Excel')\n  //   console.log(\"result: \", userDataForExcel);\n  //   if(userDataForExcel.length) {\n  //     handleClose();\n  //     setExportExcel(true)\n  //   }\n  //   // userDataForExcel.length && setExportExcel(true)\n  // }, [userDataForExcel])\n\n  // Let's add a data resetter/randomizer to help\n  // illustrate that flow...\n  const resetData = () => {\n    setData(originalData);\n  };\n\n  // const dataSet2 = [\n  //   {\n  //     name: \"Johnson\",\n  //     total: 25,\n  //     remainig: 16\n  //   },\n  //   {\n  //     name: \"Josef\",\n  //     total: 25,\n  //     remainig: 7\n  //   }\n  // ];\n  const stam = [{...externalFile}]\n  console.log('stam: ', stam)\n\n  const data5 = [\n    {\n      columns: stam[0]?.topHeaders?.map((item) => {\n        return {\n          title: item.columnName,\n        }\n      }),\n      data: stam[0].sideHeaders.map((header) => {\n        return [{value: header}]\n      }),\n    },\n  ];\n  console.log('data5: ', data5)\n  return (\n    <Styles>\n      <h1>Optima Game</h1>\n      {exportExcel &&\n        <ExcelFile hideElement={exportExcel} filename=\"Optima-Game\">\n\n          <ExcelSheet data={userDataForExcel} name=\"User Data\">\n            <ExcelColumn label=\"User Name\" value=\"userName\" />\n            <ExcelColumn label=\"Total Budget\" value=\"totalBudget\" />\n            <ExcelColumn label=\"Date\" value=\"date\" />\n            {/* <ExcelColumn label=\"Marital Status\"\n              value={(col) => col.is_married ? \"Married\" : \"Single\"} /> */}\n          </ExcelSheet>\n\n          <ExcelSheet data={userDataForExcel[0]?.selectedItems} name=\"Selected Items\">\n            <ExcelColumn label=\"Item\" value=\"text\" />\n            <ExcelColumn label=\"Row\" value=\"row\" />\n            <ExcelColumn label=\"Col\" value=\"col\" />\n            <ExcelColumn label=\"Value\" value=\"value\" />\n          </ExcelSheet>\n\n          <ExcelSheet dataSet={data5} name=\"Configuration\"></ExcelSheet>\n        </ExcelFile>\n      }\n      <div>\n        <Modal\n          show={show}\n          handleClose={handleClose}\n          handleSave={handleSave}\n          handleEmailChange={handleEmailChange}\n          value={userName}\n        ></Modal>\n        <div className=\"budgetContainer\">\n          <div>\n            <p className=\"budgetLabel\">Budget: {currency}{totalBudget.toLocaleString(undefined, { maximumFractionDigits: 2 })}</p>\n          </div>\n          <div\n            className={`currentAmount ${totalAmount > totalBudget ? \"shakeTotal\" : \"\"\n              }`}\n          >\n            Total: <span>{currency}{totalAmount.toLocaleString(undefined, { maximumFractionDigits: 2 })}</span>\n          </div>\n          <div>\n            <button onClick={resetData} className=\"resetButton\">\n              Reset Data\n            </button>\n          </div>\n        </div>\n      </div>\n      <Table\n        columns={columns}\n        data={data}\n        updateMyData={updateMyData}\n        skipPageReset={skipPageReset}\n      />\n      <div className=\"submitContainer\">\n        <button\n          type=\"text\"\n          className=\"submitButton\"\n          onClick={openModal}\n          disabled={totalAmount > totalBudget}\n        >\n          Submit\n        </button>\n      </div>\n    </Styles>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}